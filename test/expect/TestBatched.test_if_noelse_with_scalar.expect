graph(%a.1_data : Dynamic
      %a.1_mask : Dynamic
      %a.1_dims : Dynamic
      %b_data : Dynamic
      %b_mask : Dynamic
      %b_dims : Dynamic) {
  %6 : Double() = prim::Constant[value={0.1}]()
  %7 : Dynamic = aten::gt(%a.1_data, %6)
  %8 : int = prim::TensorToNum(%7)
  %9 : Long() = prim::Constant[value={1}]()
  %alpha : float = prim::TensorToNum(%9)
  %data.1 : Dynamic = aten::add(%a.1_data, %b_data, %alpha)
  %mask : Dynamic = aten::mul(%a.1_mask, %b_mask)
  %dims : Dynamic = aten::__or__(%a.1_dims, %b_dims)
  %14 : Dynamic = aten::type_as(%a.1_mask, %7)
  %cond_mask.1 : Dynamic = aten::mul(%7, %14)
  %16 : int = aten::dim(%cond_mask.1)
  %17 : int = prim::Constant[value=1]()
  %18 : int = aten::eq(%16, %17)
  %cond_data : Dynamic, %cond_mask : Dynamic, %data : Dynamic = prim::If(%18)
    block0() {
      %22 : int = aten::dim(%data.1)
      %23 : int = prim::Constant[value=1]()
      %24 : int = aten::sub(%22, %23)
      %25 : int = prim::Constant[value=1]()
      %data.3 : Dynamic = prim::Loop(%24, %25, %cond_mask.1)
        block0(%_ : int, %28 : Dynamic) {
          %29 : int = prim::Constant[value=1]()
          %30 : int = aten::neg(%29)
          %data.2 : Dynamic = aten::unsqueeze(%28, %30)
          %32 : int = prim::Constant[value=1]()
          -> (%32, %data.2)
        }
      %cond_data.1 : Dynamic = aten::expand_as(%data.3, %data.1)
      %cond_mask.2 : Dynamic = aten::expand_as(%data.3, %mask)
      -> (%cond_data.1, %cond_mask.2, %data.3)
    }
    block1() {
      -> (%cond_mask.1, %cond_mask.1, %cond_mask.1)
    }
  %res_data : Dynamic = aten::where(%cond_data, %data.1, %a.1_data)
  %res_mask : Dynamic = aten::where(%cond_mask, %mask, %a.1_mask)
  %res_dims : Dynamic = aten::__or__(%dims, %a.1_dims)
  return (%res_data, %res_mask, %res_dims);
}
