graph(%a.1_data : Dynamic
      %a.1_mask : Dynamic
      %a.1_dims : Dynamic
      %b_data : Dynamic
      %b_mask : Dynamic
      %b_dims : Dynamic) {
  %6 : float = prim::Constant[value={0.1}]()
  %7 : Dynamic = prim::NumToTensor(%6)
  %data.1 : Dynamic = aten::unsqueeze[dim=0](%7)
  %9 : int = prim::Constant[value={1}]()
  %10 : int = prim::Constant[value={0}]()
  %11 : int = prim::Constant[value={0}]()
  %12 : int[] = prim::Constant[value= 0 -1 [ CPULongTensor{2} ]]()
  %13 : Dynamic = prim::NumToTensor(%9)
  %14 : int[] = aten::stack[dim=0](%13)
  %mask.1 : Dynamic = aten::ones(%14, %10, %11, %12)
  %16 : int = prim::Constant[value={0}]()
  %17 : int = prim::Constant[value={0}]()
  %18 : int = prim::Constant[value={0}]()
  %19 : int[] = prim::Constant[value= 0 -1 [ CPULongTensor{2} ]]()
  %20 : Dynamic = prim::NumToTensor(%16)
  %21 : int[] = aten::stack[dim=0](%20)
  %dims.1 : Dynamic = aten::zeros(%21, %17, %18, %19)
  %23 : Dynamic = aten::type_as(%data.1, %a.1_data)
  %24 : Dynamic = aten::gt(%a.1_data, %23)
  %25 : Dynamic = aten::mul(%a.1_mask, %mask.1)
  %26 : Dynamic = aten::__or__(%a.1_dims, %dims.1)
  %27 : Dynamic = aten::mul(%24, %25)
  %28 : Dynamic = aten::sum(%27)
  %29 : Dynamic = aten::gt[other={0}](%28)
  %30 : Long() = prim::Constant[value={1}]()
  %31 : Number = prim::TensorToNum(%30)
  %data.2 : Dynamic = aten::add(%a.1_data, %b_data, %31)
  %mask.2 : Dynamic = aten::mul(%a.1_mask, %b_mask)
  %dims.2 : Dynamic = aten::__or__(%a.1_dims, %b_dims)
  %35 : Long() = prim::Constant[value={1}]()
  %36 : Number = prim::TensorToNum(%35)
  %data : Dynamic = aten::sub(%a.1_data, %b_data, %36)
  %mask : Dynamic = aten::mul(%a.1_mask, %b_mask)
  %dims : Dynamic = aten::__or__(%a.1_dims, %b_dims)
  %res_data : Dynamic = aten::where(%24, %data.2, %data)
  %res_mask : Dynamic = aten::where(%24, %mask.2, %mask)
  %res_dims : Dynamic = aten::__or__(%dims.2, %dims)
  return (%res_data, %res_mask, %res_dims);
}
